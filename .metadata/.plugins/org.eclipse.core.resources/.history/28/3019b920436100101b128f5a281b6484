package com.aurionpro.OCP.FixedDeposit.test;

import java.util.Scanner;

import com.aurionpro.OCP.FixedDeposit.model.DiwaliPolicy;
import com.aurionpro.OCP.FixedDeposit.model.FestivalType;
import com.aurionpro.OCP.FixedDeposit.model.HoliPolicy;
import com.aurionpro.OCP.FixedDeposit.model.InterestRatePolicy;
import com.aurionpro.OCP.FixedDeposit.model.NewYearPolicy;
import com.aurionpro.OCP.FixedDeposit.model.OtherPolicy;

public class FDTest {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int accountNumber = 0;
        while (true) {
            System.out.print("Enter 10-digit Account Number: ");
            String input = sc.nextLine();
            if (input.matches("\\d{10}")) {
                accountNumber = Integer.parseInt(input);
                break;
            } else {
                System.out.println("❌ Account number must be exactly 10 digits.");
            }
        }

        String name = "";
        while (true) {
            System.out.print("Enter Name (alphabets only): ");
            name = sc.nextLine();
            if (name.matches("[a-zA-Z ]+")) {
                break;
            } else {
                System.out.println("❌ Name must contain only alphabets.");
            }
        }

        double principal = 0;
        while (true) {
            System.out.print("Enter Principal Amount (> 0): ");
            try {
                principal = Double.parseDouble(sc.nextLine());
                if (principal > 0) break;
                else System.out.println("❌ Principal must be greater than 0.");
            } catch (NumberFormatException e) {
                System.out.println("❌ Please enter a valid number.");
            }
        }

        int duration = 0;
        while (true) {
            System.out.print("Enter Duration in years (> 0): ");
            try {
                duration = Integer.parseInt(sc.nextLine());
                if (duration > 0) break;
                else System.out.println("❌ Duration must be greater than 0.");
            } catch (NumberFormatException e) {
                System.out.println("❌ Please enter a valid number.");
            }
        }

        int festChoice = 0;
        FestivalType festType = FestivalType.OTHERS;
        while (true) {
            System.out.println("Choose Festival Type:");
            System.out.println("1. NEWYEAR\n2. DIWALI\n3. HOLI\n4. OTHERS");
            try {
                festChoice = Integer.parseInt(sc.nextLine());
                switch (festChoice) {
                    case 1: festType = FestivalType.NEWYEAR; break;
                    case 2: festType = FestivalType.DIWALI; break;
                    case 3: festType = FestivalType.HOLI; break;
                    case 4: festType = FestivalType.OTHERS; break;
                    default: 
                        System.out.println("❌ Choose between 1 to 4 only.");
                        continue;
                }
                break;
            } catch (NumberFormatException e) {
                System.out.println("❌ Enter a valid number between 1 and 4.");
            }
        }

        InterestRatePolicy policy = getPolicyByFestival(festType);
        FixedDeposit fd = new FixedDeposit(accountNumber, name, principal, duration, policy);

        System.out.println("\n--- Fixed Deposit Details ---");
        System.out.println("Name: " + fd.getName());
        System.out.println("Account Number: " + fd.getAccountNumber());
        System.out.println("Principal: ₹" + fd.getPrincipal());
        System.out.println("Duration: " + fd.getDuration() + " years");
        System.out.println("Festival: " + festType);
        System.out.println("Rate: " + policy.getRate() + "%");
        System.out.println("Simple Interest: ₹" + fd.calculateSimpleInterest());

        sc.close();
    }

    private static InterestRatePolicy getPolicyByFestival(FestivalType fest) {
        switch (fest) {
            case NEWYEAR: return new NewYearPolicy();
            case DIWALI: return new DiwaliPolicy();
            case HOLI: return new HoliPolicy();
            default: return new OtherPolicy();
        }
    }
}